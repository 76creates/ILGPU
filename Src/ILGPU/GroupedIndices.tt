// -----------------------------------------------------------------------------
//                                    ILGPU
//                     Copyright (c) 2016-2020 Marcel Koester
//                                www.ilgpu.net
//
// File: GroupedIndices.tt/GroupedIndices.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Runtime.InteropServices;

namespace ILGPU
{
<#  for (int i = 1; i <= 3; ++i) { #>
<#      var indexType = i == 1 ? "Index" : $"Index{i}"; #>
<#      var groupedIndexType = i == 1 ? "GroupedIndex" : $"GroupedIndex{i}"; #>
    /// <summary>
    /// Represents a grouped thread <#= i #>D index.
    /// </summary>
    [StructLayout(LayoutKind.Sequential)]
    public partial struct <#= groupedIndexType #> :
        IGroupedIndex<<#= indexType #>>,
        IIntrinsicIndex,
        IEquatable<<#= groupedIndexType #>>
    {
        #region Instance

        /// <summary>
        /// Constructs a new grouped index.
        /// </summary>
        /// <param name="gridIdx">The global index.</param>
        /// <param name="groupIndex">The local index.</param>
        public <#= groupedIndexType #>(<#= indexType #> gridIdx, <#= indexType #> groupIndex)
        {
            GridIdx = gridIdx;
            GroupIdx = groupIndex;
        }

        #endregion

        #region Properties

        /// <summary>
        /// Returns the global block idx.
        /// </summary>
        public <#= indexType #> GridIdx { get; }

        /// <summary>
        /// Returns the lock thread idx.
        /// </summary>
        public <#= indexType #> GroupIdx { get; }

        /// <summary>
        /// Returns the current index type.
        /// </summary>
        public IndexType IndexType => IndexType.GroupedIndex<#= i #>D;

        /// <summary>
        /// Returns the size represented by this grouped index (GridIdx * GroupIdx).
        /// </summary>
        public int Size => GridIdx.Size * GroupIdx.Size;

        #endregion

        #region Methods

        /// <summary>
        /// Computes the global index of a grouped index (gridIdx, groupIdx).
        /// </summary>
        /// <returns>The computes global index.</returns>
        public <#= indexType #> ComputeGlobalIndex()
        {
            return Grid.ComputeGlobalIndex(GridIdx, GroupIdx);
        }

        #endregion

        #region IEquatable

        /// <summary>
        /// Returns true iff the given index is equal to the current index.
        /// </summary>
        /// <param name="other">The other index.</param>
        /// <returns>True, iff the given index is equal to the current index.</returns>
        public bool Equals(<#= groupedIndexType #> other)
        {
            return this == other;
        }

        #endregion

        #region Object

        /// <summary>
        /// Returns true iff the given object is equal to the current index.
        /// </summary>
        /// <param name="obj">The other object.</param>
        /// <returns>True, iff the given object is equal to the current index.</returns>
        public override bool Equals(object obj)
        {
            if (obj is <#= groupedIndexType #>)
                return Equals((<#= groupedIndexType #>)obj);
            return false;
        }

        /// <summary>
        /// Returns the hash code of this index.
        /// </summary>
        /// <returns>The hash code of this index.</returns>
        public override int GetHashCode()
        {
            return GridIdx.GetHashCode() ^ GroupIdx.GetHashCode();
        }

        /// <summary>
        /// Returns the string representation of this index.
        /// </summary>
        /// <returns>The string representation of this index.</returns>
        public override string ToString()
        {
            return $"({GridIdx}, {GroupIdx})";
        }

        #endregion

        #region Operators

        /// <summary>
        /// Returns true iff the first and second index are the same.
        /// </summary>
        /// <param name="first">The first object.</param>
        /// <param name="second">The second object.</param>
        /// <returns>True, iff the first and second index are the same.</returns>
        public static bool operator ==(<#= groupedIndexType #> first, <#= groupedIndexType #> second)
        {
            return first.GridIdx == second.GridIdx && first.GroupIdx == second.GroupIdx;
        }

        /// <summary>
        /// Returns true iff the first and second index are not the same.
        /// </summary>
        /// <param name="first">The first object.</param>
        /// <param name="second">The second object.</param>
        /// <returns>True, iff the first and second index are not the same.</returns>
        public static bool operator !=(<#= groupedIndexType #> first, <#= groupedIndexType #> second)
        {
            return first.GridIdx != second.GridIdx || first.GroupIdx != second.GroupIdx;
        }

        #endregion
    }

<#  } #>
}