// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                        Copyright (c) 2016-2020 Marcel Koester
//                                    www.ilgpu.net
//
// File: ArithmeticOperations.tt/ArithmeticOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var unaryOperations = new []
    {
        new { Name = "Not", BoolPrefix = "!", Prefix = "~", Suffix = "", Ints = true, Floats = false },
        new { Name = "Neg", BoolPrefix = "", Prefix = "-", Suffix = "", Ints = true, Floats = false },
        new { Name = "Abs", BoolPrefix = "", Prefix = "IntrinsicMath.Abs(", Suffix = ")", Ints = true, Floats = true },
        new { Name = "RcpF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Rcp(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "IsNaNF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.IsNaN(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "IsInfF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.IsInfinity(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "SqrtF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Sqrt(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "RsqrtF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Rsqrt(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "SinF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Sin(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "SinHF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Sinh(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "AsinF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Asin(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "CosF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Cos(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "CosHF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Cosh(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "AcosF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Acos(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "TanF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Tan(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "TanHF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Tanh(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "AtanF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Atan(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "ExpF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Exp(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "Exp2F", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Exp2(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "FloorF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Floor(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "CeilingF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Ceiling(", Suffix = ")", Ints = false, Floats = true },

        new { Name = "LogF", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Log(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "Log2F", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Log2(", Suffix = ")", Ints = false, Floats = true },
        new { Name = "Log10F", BoolPrefix = "", Prefix = "IntrinsicMath.CPUOnly.Log10(", Suffix = ")", Ints = false, Floats = true },

    };

var binaryOperations = new []
    {
        new { Name = "Add", BoolSupport = false, Prefix = "", Operation = " + ", Suffix = "", Ints = true, Floats = true },
        new { Name = "Sub", BoolSupport = false, Prefix = "", Operation = " - ", Suffix = "", Ints = true, Floats = true },
        new { Name = "Mul", BoolSupport = false, Prefix = "", Operation = " * ", Suffix = "", Ints = true, Floats = true },
        new { Name = "Div", BoolSupport = false, Prefix = "", Operation = " / ", Suffix = "", Ints = true, Floats = true },
        new { Name = "Rem", BoolSupport = false, Prefix = "", Operation = " % ", Suffix = "", Ints = true, Floats = true },

        new { Name = "And", BoolSupport = true, Prefix = "", Operation = " & ", Suffix = "", Ints = true, Floats = false },
        new { Name = "Or", BoolSupport = true, Prefix = "", Operation = " | ", Suffix = "", Ints = true, Floats = false },
        new { Name = "Xor", BoolSupport = true, Prefix = "", Operation = " ^ ", Suffix = "", Ints = true, Floats = false },

        new { Name = "Shl", BoolSupport = false, Prefix = "", Operation = " << (int)", Suffix = "", Ints = true, Floats = false },
        new { Name = "Shr", BoolSupport = false, Prefix = "", Operation = " >> (int)", Suffix = "", Ints = true, Floats  = false },

        new { Name = "Min", BoolSupport = false, Prefix = "IntrinsicMath.Min(", Operation = ", ", Suffix = ")", Ints = true, Floats = true },
        new { Name = "Max", BoolSupport = false, Prefix = "IntrinsicMath.Max(", Operation = ", ", Suffix = ")", Ints  = true, Floats = true },

        new { Name = "Atan2F", BoolSupport = false, Prefix = "IntrinsicMath.CPUOnly.Atan2(", Operation = ", ", Suffix = ")", Ints = false, Floats = true },
        new { Name = "PowF", BoolSupport = false, Prefix = "IntrinsicMath.CPUOnly.Pow(", Operation = ", ", Suffix = ")", Ints = false, Floats  = true },
    };
#>

using ILGPU.IR.Values;
using ILGPU.Resources;
using System;

// disable: max_line_length
#pragma warning disable IDE0046 // Convert to conditional expression
#pragma warning disable IDE0047 // Remove unnecessary parentheses

namespace ILGPU.IR.Construction
{
    partial class IRBuilder
    {
        private ValueReference UnaryArithmeticFoldConstants(
            PrimitiveValue value,
            UnaryArithmeticKind kind)
        {
            switch (kind)
            {
<#    foreach (var operation in unaryOperations) { #>
                case UnaryArithmeticKind.<#= operation.Name #>:
                    return UnaryArithmeticFoldConstants_<#= operation.Name #>(value, kind);
<#    } #>
                default:
                    throw new ArgumentOutOfRangeException(nameof(kind));
            }
        }

<#    foreach (var operation in unaryOperations) { #>
        private ValueReference UnaryArithmeticFoldConstants_<#= operation.Name #>(
            PrimitiveValue value,
            UnaryArithmeticKind kind)
        {
            switch (value.BasicValueType)
            {
<#          if (operation.Floats) { #>
                case BasicValueType.Float32:
                    return CreatePrimitiveValue(<#= operation.Prefix #>value.Float32Value<#= operation.Suffix #>);
                case BasicValueType.Float64:
                    return CreatePrimitiveValue(<#= operation.Prefix #>value.Float64Value<#= operation.Suffix #>);
<#          } if (operation.Ints) { #>
<#              if (!string.IsNullOrEmpty(operation.BoolPrefix)) { #>
                case BasicValueType.Int1:
                    return CreatePrimitiveValue(<#= operation.BoolPrefix #>value.Int1Value<#= operation.Suffix #>);
<#              } #>
                case BasicValueType.Int8:
                    return CreatePrimitiveValue((sbyte)<#= operation.Prefix #>value.Int8Value<#= operation.Suffix #>);
                case BasicValueType.Int16:
                    return CreatePrimitiveValue((short)<#= operation.Prefix #>value.Int16Value<#= operation.Suffix #>);
                case BasicValueType.Int32:
                    return CreatePrimitiveValue(<#= operation.Prefix #>value.Int32Value<#= operation.Suffix #>);
                case BasicValueType.Int64:
                    return CreatePrimitiveValue(<#= operation.Prefix #>value.Int64Value<#= operation.Suffix #>);
<#          } #>
            }
            throw new NotSupportedException(string.Format(
                ErrorMessages.NotSupportedArithmeticArgumentType,
                value.BasicValueType));
        }

<#    } #>

        private ValueReference BinaryArithmeticFoldConstants(
            PrimitiveValue left,
            PrimitiveValue right,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
            switch (kind)
            {
<#    foreach (var operation in binaryOperations) { #>
                case BinaryArithmeticKind.<#= operation.Name #>:
                    return BinaryArithmeticFoldConstants_<#= operation.Name #>(left, right, kind, flags);
<#    } #>
                default:
                    throw new ArgumentOutOfRangeException(nameof(kind));
            }
        }

<#    foreach (var operation in binaryOperations) { #>
        private ValueReference BinaryArithmeticFoldConstants_<#= operation.Name #>(
            PrimitiveValue left,
            PrimitiveValue right,
            BinaryArithmeticKind kind,
            ArithmeticFlags flags)
        {
<#          if (operation.Ints) { #>
            var isUnsigned = (flags & ArithmeticFlags.Unsigned) == ArithmeticFlags.Unsigned;
<#          } #>
            switch (left.BasicValueType)
            {
<#          if (operation.Floats) { #>
                case BasicValueType.Float32:
                    return CreatePrimitiveValue(<#= operation.Prefix #>left.Float32Value<#= operation.Operation #>right.Float32Value<#= operation.Suffix #>);
                case BasicValueType.Float64:
                    return CreatePrimitiveValue(<#= operation.Prefix #>left.Float64Value<#= operation.Operation #>right.Float64Value<#= operation.Suffix #>);
<#          } if (operation.Ints) { #>
<#              if (operation.BoolSupport) { #>
                case BasicValueType.Int1:
                    return CreatePrimitiveValue(<#= operation.Prefix #>left.Int1Value<#= operation.Operation #>right.Int1Value<#= operation.Suffix #>);
<#              } #>
                case BasicValueType.Int8:
                    if (isUnsigned)
                        return CreatePrimitiveValue((byte)(<#= operation.Prefix #>left.UInt8Value<#= operation.Operation #>right.UInt8Value<#= operation.Suffix #>));
                    else
                        return CreatePrimitiveValue((sbyte)(<#= operation.Prefix #>left.Int8Value<#= operation.Operation #>right.Int8Value<#= operation.Suffix #>));
                case BasicValueType.Int16:
                    if (isUnsigned)
                        return CreatePrimitiveValue((ushort)(<#= operation.Prefix #>left.UInt16Value<#= operation.Operation #>right.UInt16Value<#= operation.Suffix #>));
                    else
                        return CreatePrimitiveValue((short)(<#= operation.Prefix #>left.Int16Value<#= operation.Operation #>right.Int16Value<#= operation.Suffix #>));
                case BasicValueType.Int32:
                    if (isUnsigned)
                        return CreatePrimitiveValue(<#= operation.Prefix #>left.UInt32Value<#= operation.Operation #>right.UInt32Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(<#= operation.Prefix #>left.Int32Value<#= operation.Operation #>right.Int32Value<#= operation.Suffix #>);
                case BasicValueType.Int64:
                    if (isUnsigned)
                        return CreatePrimitiveValue(<#= operation.Prefix #>left.UInt64Value<#= operation.Operation #>right.UInt64Value<#= operation.Suffix #>);
                    else
                        return CreatePrimitiveValue(<#= operation.Prefix #>left.Int64Value<#= operation.Operation #>right.Int64Value<#= operation.Suffix #>);
<#          } #>
            }
            throw new NotSupportedException(string.Format(
                ErrorMessages.NotSupportedArithmeticArgumentType,
                left.BasicValueType));
        }

<#    } #>
    }
}

#pragma warning restore IDE0046 // Convert to conditional expression
#pragma warning restore IDE0047 // Remove unnecessary parentheses