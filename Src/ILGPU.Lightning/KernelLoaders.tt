// -----------------------------------------------------------------------------
//                              ILGPU.Lightning
//                   Copyright (c) 2017 ILGPU Lightning Project
//                                www.ilgpu.net
//
// File: KernelLoaders.tt/KernelLoaders.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details.
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../ILGPU/Src/ILGPU/Basic.tt" #>
<#@ include file="Basic.tt"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var typeParameterRanges = Enumerable.Range(0, 14); #>
<# var delegateRange = from r in typeParameterRanges
    let range = Enumerable.Range(1, r + 1)
    select new
    {
        TypeParams = string.Join(", ", from rangeIdx in range select $"T{rangeIdx}"),
        TypeRestrictions = string.Join(" ", from rangeIdx in range select $"where T{rangeIdx} : struct"),
        TypeParamDocumentation = string.Join("        /// ", from rangeIdx in range select
            $"<typeparam name=\"T{rangeIdx}\">Parameter type of parameter {rangeIdx}.</typeparam>{Environment.NewLine}"), 
    }; #>

using ILGPU.Runtime;
using System;

namespace ILGPU.Lightning
{
    /// <summary>
    /// Contains extensions for convenient kernel loading of default kernels.
    /// </summary>
    public static class KernelLoaders
    {
<# foreach (var delegateParams in delegateRange) { #>
<#      // LoadKernel #>
        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that
        /// can receive arbitrary accelerator streams (first parameter).
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernels will be launched with a group size
        /// of the current warp size of the accelerator.
        /// </remarks>
        public static Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>> LoadKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadKernel<Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>>>(action.Method);
        }

        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that launches
        /// the loaded kernel with the default stream.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernels will be launched with a group size
        /// of the current warp size of the accelerator.
        /// </remarks>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(action.Method);
        }

        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that is associated
        /// with the given accelerator stream. Consequently, the resulting delegate
        /// cannot receive other accelerator streams.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <param name="stream">The accelerator stream to use.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernels will be launched with a group size
        /// of the current warp size of the accelerator.
        /// </remarks>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action,
            AcceleratorStream stream)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method,
                stream);
        }

<#      // LoadImplicitlyGroupedKernel #>
        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that
        /// can receive arbitrary accelerator streams (first parameter).
        /// group size.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <param name="customGroupSize">The custom group size to use.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernel will be launched with the given
        /// group size.
        /// </remarks>
        public static Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>> LoadImplicitlyGroupedKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action,
            int customGroupSize)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadImplicitlyGroupedKernel<Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method,
                customGroupSize);
        }

        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that launches
        /// the loaded kernel with the default stream.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <param name="customGroupSize">The custom group size to use.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernel will be launched with the given
        /// group size.
        /// </remarks>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadImplicitlyGroupedStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action,
            int customGroupSize)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadImplicitlyGroupedStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method,
                customGroupSize);
        }


        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that is associated
        /// with the given accelerator stream. Consequently, the resulting delegate
        /// cannot receive other accelerator streams.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <param name="customGroupSize">The custom group size to use.</param>
        /// <param name="stream">The accelerator stream to use.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        /// <remarks>
        /// Note that implictly-grouped kernel will be launched with the given
        /// group size.
        /// </remarks>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadImplicitlyGroupedStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action,
            int customGroupSize,
            AcceleratorStream stream)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadImplicitlyGroupedStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method,
                customGroupSize,
                stream);
        }

<#      // LoadAutoGroupedKernel #>
        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that
        /// can receive arbitrary accelerator streams (first parameter).
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        public static Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>> LoadAutoGroupedKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadAutoGroupedKernel<Action<AcceleratorStream, TIndex, <#= delegateParams.TypeParams #>>>(action.Method);
        }

        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that launches
        /// the loaded kernel with the default stream.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadAutoGroupedStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadAutoGroupedStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method);
        }

        /// <summary>
        /// Loads the given kernel and returns a launcher delegate that is associated
        /// with the given accelerator stream. Consequently, the resulting delegate
        /// cannot receive other accelerator streams.
        /// </summary>
        /// <typeparam name="TIndex">The index type.</typeparam>
        /// <#= delegateParams.TypeParamDocumentation #>
        /// <param name="lightningContext">The current lightning context.</param>
        /// <param name="action">The action to compile into a kernel.</param>
        /// <param name="stream">The accelerator stream to use.</param>
        /// <returns>The loaded kernel-launcher delegate.</returns>
        public static Action<TIndex, <#= delegateParams.TypeParams #>> LoadAutoGroupedStreamKernel<TIndex, <#= delegateParams.TypeParams #>>(
            this LightningContext lightningContext,
            Action<TIndex, <#= delegateParams.TypeParams #>> action,
            AcceleratorStream stream)
            where TIndex : struct, IIndex
            <#= delegateParams.TypeRestrictions #>
        {
            if (action == null)
                throw new ArgumentNullException(nameof(action));
            return lightningContext.LoadAutoGroupedStreamKernel<Action<TIndex, <#= delegateParams.TypeParams #>>>(
                action.Method,
                stream);
        }

<#  } #>
    }
}