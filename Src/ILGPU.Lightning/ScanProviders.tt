// -----------------------------------------------------------------------------
//                              ILGPU.Lightning
//                   Copyright (c) 2017 ILGPU Lightning Project
//                                www.ilgpu.net
//
// File: ScanProviders.tt/ScanProviders.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details.
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../ILGPU/Src/ILGPU/Basic.tt" #>
<#@ include file="Basic.tt"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using ILGPU.Runtime;
using System.Runtime.CompilerServices;

#pragma warning disable IDE0001 // Simplify Names

namespace ILGPU.Lightning
{
    partial class ScanProviderImplementation
    {
<# foreach (var config in ScanConfigurations) { #>
        /// <summary>
        /// Performs a scan operation on the given elements.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="cache">The target cache.</param>
        /// <param name="stream">The accelerator stream.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache,
            AcceleratorStream stream)
        {
            if (!source.IsValid)
                throw new ArgumentNullException(nameof(source));
            if (!target.IsValid)
                throw new ArgumentNullException(nameof(target));
            if (target.Length < source.Length)
                throw new ArgumentOutOfRangeException(nameof(source), "The source view is larger than the target view");
            if (stream == null)
                throw new ArgumentNullException(nameof(stream));
            <#= config.InternalName #>(source, target, cache, stream);
        }

        /// <summary>
        /// Performs a scan operation on the given elements.
        /// Note that the arguments do not have to be verified since they
        /// have already been verified.
        /// function.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="cache">The target cache.</param>
        /// <param name="stream">The accelerator stream.</param>
        internal abstract void <#= config.InternalName #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache,
            AcceleratorStream stream);

<# } #>

    }

    partial class ScanProvider
    {
<# foreach (var config in ScanConfigurations) { #>
        /// <summary>
        /// Performs a scan operation on the given elements.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target)
        {
            <#= config.Name #>(
                source,
                target,
                Accelerator.DefaultStream);
        }

        /// <summary>
        /// Performs a scan operation on the given elements.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="stream">The accelerator stream.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            AcceleratorStream stream)
        {
            implementation.<#= config.Name #>(
                source,
                target,
                bufferCache,
                stream);
        }

<# } #>

    }

    partial class LightningContext
    {
        #region Scan

<# foreach (var config in ScanConfigurations) { #>
        /// <summary>
        /// Performs a scan operation on the given elements using the default cache.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target)
        {
            <#= config.Name #>(
                source,
                target,
                DefaultCache,
                Accelerator.DefaultStream);
        }

        /// <summary>
        /// Performs a scan operation on the given elements using the default cache.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="stream">The accelerator stream.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            AcceleratorStream stream)
        {
            <#= config.Name #>(
                source,
                target,
                DefaultCache,
                stream);
        }

        /// <summary>
        /// Performs a scan operation on the given elements.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="cache">The target cache.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache)
        {
            <#= config.Name #>(
                source,
                target,
                cache,
                Accelerator.DefaultStream);
        }

        /// <summary>
        /// Performs a scan operation on the given elements.
        /// </summary>
        /// <param name="source">The source elements.</param>
        /// <param name="target">The target elements.</param>
        /// <param name="cache">The target cache.</param>
        /// <param name="stream">The accelerator stream.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#= config.Name #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache,
            AcceleratorStream stream)
        {
            scanImplementation.<#= config.Name #>(
                source,
                target,
                cache,
                stream);
        }

<# } #>

        #endregion
    }
}

#pragma warning restore IDE0001