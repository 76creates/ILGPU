// -----------------------------------------------------------------------------
//                                    ILGPU
//                Copyright (c) 2017-2018 ILGPU Lightning Project
//                                www.ilgpu.net
//
// File: ScanOperations.tt/ScanOperations.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="TypeInformation.tt"#>
<#@ include file="Basic.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var scanTypes = SignedIntTypes.Concat(
    UnsignedIntTypes.Concat(
    FloatTypes));
var operations = new []
    {
        new { Name = "Add", Identity = "0", Prefix = "", Operation = " + ", Suffix = "" },
        new { Name = "Mul", Identity = "1", Prefix = "", Operation = " * ", Suffix = "" },
    };
#>
using System;
using ILGPU.Lightning;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable IDE0004 // Cast is redundant

namespace ILGPU.ScanOperations
{
<#  foreach (var type in scanTypes) { #>
<#      foreach (var op in operations) { #>
    /// <summary>
    /// Represents an <#= op.Name #> scan of type <#= type.Type #>.
    /// </summary>
    [SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes")]
<#      if (type.IsUnsignedInt || type.Name.Contains("Int8")) { #>
    [CLSCompliant(false)]
<#      } #>
    public readonly struct Scan<#= op.Name #><#= type.Name #> : IScanOperation<<#= type.Type #>>
    {
        /// <summary>
        /// Returns the scan's identity value.
        /// </summary>
        public <#= type.Type #> Identity => <#= string.Format(op.Identity, type.Type) #>;

        /// <summary>
        /// Applies the scan operation.
        /// </summary>
        /// <param name="first">The first operand.</param>
        /// <param name="second">The second operand.</param>
        /// <returns>The result of the scan operation.</returns>
        public <#= type.Type #> Apply(<#= type.Type #> first, <#= type.Type #> second)
        {
            return (<#= type.Type #>)(<#= op.Prefix #>first<#= op.Operation #>second<#= op.Suffix #>);
        }
    }

<#      } #>

<#  } #>
}

#pragma warning restore IDE0004