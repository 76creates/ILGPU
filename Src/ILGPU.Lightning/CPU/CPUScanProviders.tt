// -----------------------------------------------------------------------------
//                              ILGPU.Lightning
//                   Copyright (c) 2017 ILGPU Lightning Project
//                                www.ilgpu.net
//
// File: CPUScanProviders.tt/CPUScanProviders.cs
//
// This file is part of ILGPU and is distributed under the University of
// Illinois Open Source License. See LICENSE.txt for details.
// -----------------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../../ILGPU/Src/ILGPU/Basic.tt" #>
<#@ include file="../Basic.tt"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using ILGPU.Runtime;

#pragma warning disable IDE0001 // Simplify Names
#pragma warning disable IDE0004 // Cast is redundant

namespace ILGPU.Lightning.CPU
{
    partial class CPUScanProviderImplementation
    {
        // TODO: replace naive scan implementations by clever parallel ones

<# foreach(var config in ScanConfigurations.Where(t => t.Mode == ScanMode.Inclusive)) { #>
        internal override void <#= config.InternalName #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache,
            AcceleratorStream stream)
        {
            target[0] = source[0];
            for (int i = 1, e = source.Length; i < e; ++i)
                target[i] = (<#= config.Type #>)(target[i - 1] + source[i]);
        }

<# } #>

<# foreach(var config in ScanConfigurations.Where(t => t.Mode == ScanMode.Exclusive)) { #>
        internal override void <#= config.InternalName #>(
            ArrayView<<#= config.Type #>> source,
            ArrayView<<#= config.Type #>> target,
            MemoryBufferCache cache,
            AcceleratorStream stream)
        {
            target[0] = 0;
            for (int i = 1, e = source.Length; i < e; ++i)
                target[i] = (<#= config.Type #>)(target[i - 1] + source[i - 1]);
        }

<# } #>

    }
}

#pragma warning restore IDE0001
#pragma warning restore IDE0004